{"timestamp": 1661319322.27542, "stored_source_code": "# Add description here\n#\n# *Note:* You can open this file as a notebook (JupyterLab: right-click on it in the side bar -> Open With -> Notebook)\n# Uncomment the next two lines to enable auto reloading for imported modules\n# %load_ext autoreload\n# %autoreload 2\n# For more info, see:\n# https://docs.ploomber.io/en/latest/user-guide/faq_index.html#auto-reloading-code-in-jupyter\n# If this task has dependencies, declare them in the YAML spec and leave this\nfrom darts.utils.utils import ModelMode, SeasonalityMode\nfrom datetime import timedelta\n\nfrom darts import TimeSeries\nfrom darts.dataprocessing.transformers import Scaler\nfrom darts.utils.statistics import plot_residuals_analysis\nfrom darts.models import AutoARIMA, ARIMA, VARIMA, ExponentialSmoothing\nfrom darts.metrics import rmse, mae\n\nfrom hydro_timeseries.darts_utils import backtest_minute_data, exploratory_arima\nfrom hydro_timeseries.plotting import plot_residuals, tsplot\nfrom hydro_timeseries.pytorch_utils import pl_trainer_kwargs\nfrom hydro_timeseries.util import load_timeseries_csv, add_mean_vars\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom darts.models import BlockRNNModel, RNNModel\n\nfrom hydro_timeseries.variables import Variables\n\nupstream = None\n\n# This is a placeholder, leave it as None\nproduct = None\n# your code here...\ndata = load_timeseries_csv(upstream['run-tests']['data'])\ndata = add_mean_vars(data)\ndata = data.dropna(axis = 0)\ndata_daily = data.resample('D').mean()\nsimulate_from = pd.to_datetime(simulate_from)\nvalid_from = pd.to_datetime(valid_from)\n\nts_minute = TimeSeries.from_dataframe(data)\nts = TimeSeries.from_dataframe(data_daily)\ncovariates = ts[Variables.meteo_means_i]\ntrain_until = valid_from - timedelta(days=1)\nplt.figure(100, figsize=(25, 5))\nts_minute[:valid_from]['Value'].plot(label=\"training\")\nts_minute[valid_from:simulate_from]['Value'].plot(label=\"validation\")\nts_minute[simulate_from:]['Value'].plot(label=\"simulation\")\nplt.show()\n'''\nARIMA(2,1,1) on daily mean to observe covariates\n- 1 no covariates\n- 2 means across stations\n- 3 all precip covariates\n\n- Conclusion = most information in the target? \n'''\nprint(\"No covariates\")\nexploratory_arima(ts[:train_until]['Value'], covariates=None)\nprint(\"Mean covariate\")\nexploratory_arima(ts[:train_until]['Value'], covariates=ts[:train_until][Variables.meteo_means_i])\nprint(\"Precip covariate\")\nexploratory_arima(ts[:train_until]['Value'], covariates=ts[:train_until][Variables.precip])\ncov_scaler = Scaler()\nvalue_scaler = Scaler()\ncovariates_daily = ts[Variables.meteo_means_i]\ncovariates_daily_scaled = cov_scaler.fit_transform(ts[Variables.meteo_means_i])\nvalue_daily_scaled = value_scaler.fit_transform(ts['Value'])\n\ntrain_scaled = value_daily_scaled[:train_until]\ntrain, val = value_daily_scaled.split_before(valid_from)\ntrain_covs, val_covs = covariates_daily_scaled.split_before(valid_from)\nval, sim = val.split_before(simulate_from)\nval_covs, sim_covs = val_covs.split_before(simulate_from)\n'''\nDay ahead backtest on hold out\n'''\narima = ARIMA(p=2, d=1, q=1, trend=None)\n\nbacktest, ts_eval, rmse_val, mae_val, smape_val = backtest_minute_data(arima, ts['Value'],\n                                                   data_df=data, valid_from=simulate_from,\n                                                   future_covariates=covariates_daily_scaled['precip_mean'],\n                                                   forecast_horizon=2, scaler=None\n                                                   )\n'''\nExponential smoothing\n'''\nexp_smooth = ExponentialSmoothing(trend=ModelMode.ADDITIVE)\n\nbacktest, ts_eval, rmse_val, mae_val, smape_val = backtest_minute_data(exp_smooth, ts['Value'],\n                     data_df=data, valid_from=simulate_from,\n                     forecast_horizon=2, scaler=None\n                    )\n'''\nSimple RNN\n'''\nvalue_scaler = Scaler()\nvalue_daily_scaled = value_scaler.fit_transform(ts['Value'])\n'''\nSimple RNN for daily = approx ARIMA\n'''\nbrnn_no_cov = BlockRNNModel(input_chunk_length=30,\n                            output_chunk_length=2,\n                            n_rnn_layers=1)\n\nbrnn_no_cov.fit(train,\n                epochs=100,\n                verbose=True,\n                val_series = val\n                )\n\nbacktest, ts_eval, rmse_val, mae_val, smape_val = backtest_minute_data(brnn_no_cov, value_daily_scaled, scaler = value_scaler,\n                                   data_df=data, valid_from=simulate_from, retrain=False)\n'''\nRNN with past covariates\n'''\nsoil_moisture = covariates_daily_scaled[['soil_moisture_mean']]\n# rain = covariates_daily['precip_mean']\n\nbrnn_past = BlockRNNModel(input_chunk_length=50,\n                         output_chunk_length=2,\n                         n_rnn_layers=3)\n\nbrnn_past.fit(train,\n             past_covariates=train_covs['soil_moisture_mean'],\n             val_series=val,\n             val_past_covariates=val_covs['soil_moisture_mean'],\n             epochs=200,\n             verbose=True)\nbacktest, ts_eval, rmse_val, mae_val, smape_val = backtest_minute_data(brnn_past, value_daily_scaled,\n                                data_df=data, valid_from=simulate_from,\n                                past_covariates=soil_moisture,\n                                scaler = value_scaler, retrain=False\n                                )\n'''\nGRU + future covariates 330 RMSE\n'''\n\nfuture_cov = covariates_daily_scaled[['precip_mean', 'pressure_mean']]\n\n'''\nGenerally speaking, `training_length` should have a higher value than `input_chunk_length`\nbecause otherwise during training the RNN is never run for as many iterations as it will during\ntraining.\n'''\n\nrnn_rain = RNNModel(input_chunk_length=3,\n                    training_length=5,\n                    model='GRU',\n                    n_rnn_layers=2,\n                    dropout=0.5\n                    )\n\nrnn_rain.fit(train,\n             future_covariates=train_covs[['precip_mean', 'temperature_mean']],\n             val_series=val,\n             val_future_covariates=val_covs[['precip_mean', 'temperature_mean']],\n             epochs=100,\n             verbose=True)\n\nbacktest, ts_eval, rmse_val, mae_val, smape_val = backtest_minute_data(rnn_rain, value_daily_scaled,\n                                   data_df=data, valid_from=simulate_from,\n                                   # past_covariates=soil_moisture,\n                                   future_covariates=covariates_daily_scaled[['precip_mean', 'temperature_mean']],\n                                   scaler = value_scaler, retrain=False\n                             )\n'''\nRegressionModel\n\n- Past covariates are time series whose past values are known at prediction time. Those series often contain values that have to be observed to be known.\n- Future covariates are time series whose future values are known at prediction time. More precisely, for a prediction made at time t for a forecast horizon n, the values at times t+1, \u2026, t+n are known. Often, the past values (for times t-k, t-k+1, \u2026, t for some lookback window k) of future covariates are known as well. Future covariates series contain for instance calendar informations or weather forecasts.\n\nThe lags of the target and past covariates have to be strictly negative (in the past), \nwhereas the lags of the future covariates can also be positive (in the future). \nFor instance, a lag value of -5 means that the value at time t-5 is used to predict the target at time t; and a lag of 0 means that the future covariate value at time t is used to predict the target at time t. \nIn the code below, we specify past covariate lags as [-5, -4, -3, -2, -1] which means that the model will look at the last 5 past_covariates values\nSimilarly, we specify the future covariate lags as [-4, -3, -2, -1, 0] which means that the model will look at the last 4 historic values (lags -4 to -1) and the current value (lag 0) of the future_covariates.\n\n'''\nrain = train_covs['precip_mean']\nsoil = train_covs['soil_moisture_mean']\n\nfuture_covs_regr = train_covs[['precip_mean','soil_moisture_mean']]\n\nfrom darts.models import RegressionModel\n\nregr_model = RegressionModel(lags=[-5,-4,-3,-2],\n                             # lags_past_covariates=[-3, -2, -1],\n                             lags_future_covariates=[ -2, -1, 0])\n\nregr_model.fit(train,\n               # past_covariates=soil,\n               future_covariates=future_covs_regr\n               )\nbacktest, ts_eval, rmse_val, mae_val, smape_val = backtest_minute_data(regr_model, value_daily_scaled,\n                                   # past_covariates=covariates_daily_scaled['soil_moisture_mean'],\n                                   future_covariates=covariates_daily_scaled[['precip_mean','soil_moisture_mean']],\n                                   data_df=data, valid_from=simulate_from,\n                                   scaler = value_scaler, retrain=False\n                             )\n\n", "params": {"random_seed": 1, "valid_from": "2021-10-01", "simulate_from": "2021-12-01"}}