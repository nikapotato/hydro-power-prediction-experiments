{"timestamp": 1661327710.222913, "stored_source_code": "# Add description here\n#\n# *Note:* You can open this file as a notebook (JupyterLab: right-click on it in the side bar -> Open With -> Notebook)\n# Uncomment the next two lines to enable auto reloading for imported modules\n# %load_ext autoreload\n# %autoreload 2\n# For more info, see:\n# https://docs.ploomber.io/en/latest/user-guide/faq_index.html#auto-reloading-code-in-jupyter\n# If this task has dependencies, declare them in the YAML spec and leave this\n# as None\n\nimport warnings\n\nimport numpy as np\nimport pandas as pd\nfrom sktime.forecasting.ets import AutoETS\nfrom sktime.forecasting.exp_smoothing import ExponentialSmoothing\nfrom sktime.forecasting.model_selection import (\n    ExpandingWindowSplitter,\n)\nfrom sktime.forecasting.trend import PolynomialTrendForecaster\nfrom sktime.transformations.series.detrend import Detrender\n\nfrom hydro_timeseries.plotting import tsplot, get_windows\nfrom hydro_timeseries.util import load_timeseries_csv, cv_evaluate\n\nwarnings.simplefilter(\"ignore\", category=UserWarning)\n\n\nupstream = None\n\n# This is a placeholder, leave it as None\nproduct = None\ndata = load_timeseries_csv(upstream['run-tests']['data'])\ndata = data.dropna()\n\nfeatures=load_timeseries_csv(upstream['feature-manual']['data'])\narima_detrended = features['Value'] - features['arima_current']\narima_detrended = arima_detrended.dropna()\nsimulate_from = pd.to_datetime(simulate_from)\nvalid_from = pd.to_datetime(valid_from)\nfeatures = features.asfreq('15min')\nfeatures = features.dropna(axis=0)\n'''\nDaily\n'''\ndaily = features.resample('D').mean()\nX_daily = daily[daily.columns.difference(['Value'])]\ny_daily = daily.Value\n'''\nhourly\n'''\nhourly = features.resample('h').mean()\nX_hourly = hourly[hourly.columns.difference(['Value'])]\ny_hourly = hourly.Value\n'''\nnormal\n'''\nX = features[features.columns.difference(['Value'])].asfreq('15min')\ny = data.Value.asfreq('15min')\n'''\nOriginal ts\n'''\ntsplot(y, label='Original 15 minute ts')\n'''\nDetrended with 2step daily arima.\n-residual trend remains obvious from the changing mean, ACFs, PACFs\n'''\ntsplot(arima_detrended, label='Arima daily, 2nd step, detrended')\npoly_transformer = Detrender(forecaster=PolynomialTrendForecaster(degree=1))\ny_hat_poly = poly_transformer.fit_transform(y)\ntsplot(y_hat_poly, label=\"Polynomial detrender - degree = 1\")\n'''\nExponential smoothing\n- additive trend\n- no seasonality\n'''\nexp_smoother = ExponentialSmoothing(trend=\"add\", damped_trend=True, remove_bias=True)\nexp_transformer = Detrender(forecaster=exp_smoother)\ny_hat_exp = exp_transformer.fit_transform(y)\ntsplot(y_hat_exp, label=\"exponential smoothing as a detrender\")\n'''\nDefine forecast horizon for evaluation to be the 2nd day and step=96\n- use expanding window CV with the forecast horizon\n- the test window should represent one day, number of splits should be number of dates in the simulation dataset\n'''\nstep = 96\nfh = np.arange(97, 193)\ncv = ExpandingWindowSplitter(initial_window=step*7, fh=fh, step_length=step)\n\nn_splits = cv.get_n_splits(y)\nprint(f\"Number of Folds = {n_splits}\")\n\ntrain_windows, test_windows = get_windows(y, cv)\n# plot_windows(y, train_windows, test_windows)\n\nprint(y[test_windows[-1]].index)\ny_pred, y_test, smape_test, rmse_test, mae_test, df = cv_evaluate(forecaster=AutoETS(trend='add', damped_trend=True), y=y, cv=cv, X=None)\n\ny_detrended = y_test - y_pred\ntsplot(y_test - y_pred, label=f\"Detrended using AutoETS n_val={len(y_pred)} SMAPE={smape_test:.4f}\")\nprint(f\"AutoETS as detrender n_val={len(y_pred)} SMAPE={smape_test:.4f} RMSE={rmse_test:.2f} MAE={mae_test:.2f}\")\n\n'''\nets detrended = ADF Statistic: -13.914\narima detr = ADF Statistic: -12.023\n'''\n\n# adfuller_test(value_detr, window=96)", "params": {"random_seed": 1, "valid_from": "2021-11-01", "simulate_from": "2021-12-01"}}